# Arquivo: actions.py

import os
import json
import datetime
import requests
import socket
import base64 
import google.generativeai as genai
from PySide6.QtCore import QObject, Signal, QThread
from pathlib import Path
from PySide6.QtCore import QUrl, Qt
from PySide6.QtWidgets import QFileDialog, QPushButton, QWidget, QVBoxLayout, QListWidget, QListWidgetItem, QLineEdit, QInputDialog, QMessageBox
from PySide6.QtGui import QAction, QKeySequence, QTextDocument, QActionGroup
from PySide6.QtNetwork import QNetworkProxy
from PySide6.QtWebEngineCore import QWebEnginePage, QWebEngineSettings, QWebEngineDownloadRequest

from dialogs import ProxyDialog, TamperDialog
from components import WebView, HtmlEditor, QPlainTextEdit, UrlInterceptor, SplitEditor

class FileMenuActions:
    """Mixin que implementa as a√ß√µes do menu 'Arquivo', 'Ferramentas' e relacionados."""

    def carregar_proxies(self):
        """
        Carrega a lista de proxies a partir de um arquivo JSON.
        Caso o arquivo n√£o exista ou esteja corrompido, inicializa uma lista vazia.
        """
        try:
            with open(self.proxies_file, "r") as f:
                self.proxy_list = json.load(f)
            if self.proxy_list:
                print(f"{len(self.proxy_list)} proxies carregados de '{self.proxies_file}'.")
        except (FileNotFoundError, json.JSONDecodeError):
            print(f"Arquivo '{self.proxies_file}' n√£o encontrado ou inv√°lido. "
                  "Come√ßando com lista de proxies vazia.")
            self.proxy_list = []

    def salvar_proxies(self):
        """
        Salva a lista de proxies atual em um arquivo JSON.
        """
        with open(self.proxies_file, "w") as f:
            json.dump(self.proxy_list, f, indent=4)
        print("Lista de proxies salva.")

    def criar_menus(self):
        """
        Cria e configura todos os menus principais da aplica√ß√£o:
        Arquivo, Exibir, Ferramentas, Hist√≥rico e Ajuda.
        Tamb√©m define atalhos de teclado e conecta a√ß√µes aos m√©todos correspondentes.
        """
        menu_bar = self.menuBar()

        # --- Menu Arquivo ---
        file_menu = menu_bar.addMenu("&Arquivo")
        open_page_action = QAction("Abrir P√°gina Local...", self)
        open_page_action.setShortcut(QKeySequence("Ctrl+Shift+O"))
        open_page_action.triggered.connect(self.abrir_pagina_local)
        file_menu.addAction(open_page_action)

        open_editor_action = QAction("Abrir no Editor...", self)
        open_editor_action.setShortcut(QKeySequence("Ctrl+O"))
        open_editor_action.triggered.connect(self.abrir_arquivo_no_editor)
        file_menu.addAction(open_editor_action)

        self.save_action = QAction("&Salvar Como...", self)
        self.save_action.setShortcut(QKeySequence("Ctrl+S"))
        self.save_action.triggered.connect(self.salvar_arquivo)
        file_menu.addAction(self.save_action)

        file_menu.addSeparator()
        quit_action = QAction("&Sair", self)
        quit_action.triggered.connect(self.close)
        file_menu.addAction(quit_action)

        # --- Menu Exibir ---
        view_menu = menu_bar.addMenu("E&xibir")

        # Alternar tela cheia
        self.fullscreen_action = QAction("Tela Cheia\tF11", self, checkable=True)
        self.fullscreen_action.toggled.connect(self.toggle_full_screen)
        view_menu.addAction(self.fullscreen_action)
        view_menu.addSeparator()

        # Alternar visibilidade das barras de ferramentas
        self.toggle_menu_bar_action = QAction("Exibir Barra de Menus\tCtrl+M", self, checkable=True)
        self.toggle_menu_bar_action.setChecked(True)
        self.toggle_menu_bar_action.toggled.connect(lambda checked: self.menuBar().setVisible(checked))
        view_menu.addAction(self.toggle_menu_bar_action)

        self.toggle_nav_bar_action = QAction("Exibir Barra de Navega√ß√£o\tCtrl+Shift+L", self, checkable=True)
        self.toggle_nav_bar_action.setChecked(True)
        self.toggle_nav_bar_action.toggled.connect(lambda checked: self.nav_toolbar.setVisible(checked))
        view_menu.addAction(self.toggle_nav_bar_action)

        self.toggle_bookmarks_bar_action = QAction("Exibir Barra de Favoritos\tCtrl+Shift+B", self, checkable=True)
        self.toggle_bookmarks_bar_action.setChecked(True)
        self.toggle_bookmarks_bar_action.toggled.connect(lambda checked: self.bookmarks_toolbar.setVisible(checked))
        view_menu.addAction(self.toggle_bookmarks_bar_action)

        view_menu.addSeparator()

        # A√ß√µes de zoom
        zoom_in_action = QAction("Aumentar Zoom\tCtrl++", self)
        zoom_in_action.triggered.connect(self.zoom_in)
        view_menu.addAction(zoom_in_action)

        zoom_out_action = QAction("Diminuir Zoom\tCtrl+-", self)
        zoom_out_action.triggered.connect(self.zoom_out)
        view_menu.addAction(zoom_out_action)

        zoom_reset_action = QAction("Restaurar Zoom Padr√£o\tCtrl+0", self)
        zoom_reset_action.triggered.connect(self.zoom_reset)
        view_menu.addAction(zoom_reset_action)

        # --- Menu Ferramentas ---
        tools_menu = menu_bar.addMenu("&Ferramentas")
        proxy_action = QAction("Gerenciar Proxies...", self)
        proxy_action.triggered.connect(self.abrir_dialogo_proxy)
        tools_menu.addAction(proxy_action)

        ia_panel_action = QAction("Assistente IA", self)
        ia_panel_action.triggered.connect(self.abrir_painel_ia)
        tools_menu.addAction(ia_panel_action)

        network_action = QAction("Painel de Rede", self)
        network_action.triggered.connect(self.toggle_network_panel)
        tools_menu.addAction(network_action)

        # --- Menu Hist√≥rico ---
        history_menu = menu_bar.addMenu("Hi&st√≥rico")
        show_history_action = QAction("Ver Hist√≥rico Completo\tCtrl+H", self)
        show_history_action.triggered.connect(self.abrir_aba_historico)
        history_menu.addAction(show_history_action)

        # --- Menu Ajuda ---
        help_menu = menu_bar.addMenu("A&juda")
        about_action = QAction("Sobre o Navegador do FEP", self)
        about_action.triggered.connect(self.abrir_janela_sobre)
        help_menu.addAction(about_action)

    def abrir_janela_sobre(self):
        """
        Exibe uma janela de di√°logo 'Sobre' com informa√ß√µes do navegador.

        Responsabilidades:
        - Mostrar nome, vers√£o e descri√ß√£o do navegador.
        - Destacar recursos principais (ex.: suporte a Gopher, editor, IA).
        - Exibir √≠cone da aplica√ß√£o.
        - Fornecer bot√£o de fechamento amig√°vel.
        """
        msg_box = QMessageBox(self)
        msg_box.setIconPixmap(self.windowIcon().pixmap(64, 64))
        msg_box.setWindowTitle("Sobre o Navegador do FEP")

        # T√≠tulo principal
        msg_box.setText("<h2 style='margin:0;'>üåê Navegador do FEP</h2>")

        # Texto informativo com HTML formatado
        msg_box.setInformativeText(
            "<p><b>Vers√£o:</b> 1.0</p>"
            "<p>Um navegador web customizado com ferramentas avan√ßadas:</p>"
            "<ul>"
            "<li>üìù Editor de c√≥digo integrado</li>"
            "<li>üì° Painel de rede para inspe√ß√£o</li>"
            "<li>ü§ñ Assistente de IA embutido</li>"
            "<li>üêá Suporte ao protocolo <b>Gopher</b></li>"
            "<li>üìÑ Visualizador de PDFs integrado</li>"
            "</ul>"
            "<hr>"
            "<p><b>Autor:</b> Felipe Andrian Peixoto</p>"
            "<p style='font-size:10pt; color:gray;'>"
            "Desenvolvido em Python + QtWebEngine"
            "</p>"
        )

        # Bot√£o de fechar
        msg_box.setStandardButtons(QMessageBox.Ok)
        msg_box.button(QMessageBox.Ok).setText("Fechar")

        msg_box.exec()

    def abrir_painel_ia(self):
        """
        Alterna a exibi√ß√£o do painel lateral de Assistente IA.
        """
        if self.ai_dock.isVisible():
            self.ai_dock.hide()
        else:
            self.ai_dock.show()

    def abrir_arquivo_no_editor(self):
        """
        Abre um arquivo de texto/HTML no editor embutido.
        """
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Abrir Arquivo no Editor", "",
            "Arquivos HTML (*.html *.htm);;Arquivos de Texto (*.txt);;Todos os Arquivos (*)"
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                file_name = os.path.basename(file_path)
                self.abrir_editor_html(content=content, title=file_name)
            except Exception as e:
                print(f"Erro ao abrir o arquivo: {e}")

    def abrir_pagina_local(self):
        """
        Abre uma p√°gina HTML local em uma nova aba do navegador.
        """
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Abrir P√°gina Local", "",
            "Arquivos HTML (*.html *.htm);;Todos os Arquivos (*)"
        )
        if file_path:
            local_url = QUrl.fromLocalFile(file_path)
            self.adicionar_nova_aba(local_url)

    def salvar_arquivo(self):
        """
        Salva o conte√∫do do editor atual em um arquivo escolhido pelo usu√°rio.
        Suporta tanto SplitEditor quanto HtmlEditor.
        """
        aba = self.aba_atual()

        # Identifica o tipo de editor ativo
        editor_instance = None
        if isinstance(aba, SplitEditor):
            editor_instance = aba.editor
        elif isinstance(aba, HtmlEditor):
            editor_instance = aba

        if not editor_instance:
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self, "Salvar Como...", "",
            "Arquivos HTML (*.html *.htm);;Arquivos de Texto (*.txt)"
        )
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(editor_instance.toPlainText())
                self.tabs.setTabText(self.tabs.currentIndex(), os.path.basename(file_path))
            except Exception as e:
                print(f"Erro ao salvar o arquivo: {e}")

    def abrir_dialogo_proxy(self):
        """
        Abre a janela de gerenciamento de proxies, permitindo configurar
        proxies tempor√°rios, salvar novos ou desativar o uso de proxy.
        """
        dialog = ProxyDialog(self)
        dialog.temp_use_button.clicked.connect(lambda: self.definir_proxy_temporario(dialog))
        dialog.save_and_use_button.clicked.connect(lambda: self.salvar_e_usar_proxy(dialog))
        dialog.disable_button.clicked.connect(self.desativar_proxy)
        dialog.show()

    def get_proxy_from_dialog(self, dialog):
        """
        Obt√©m os dados de host e porta informados no di√°logo de configura√ß√£o de proxy.

        - L√™ os valores digitados nos campos de entrada do di√°logo.
        - Remove espa√ßos em branco e caracteres inv√°lidos.
        - Valida se a porta √© um n√∫mero inteiro.
        - Retorna uma tupla (host, port) em caso de sucesso, ou (None, None) em caso de erro.
        """
        host = dialog.host_input.text().strip()
        port_text = dialog.port_input.text().replace('_', '').strip()
        if host and port_text:
            try:
                port = int(port_text)
                return host, port
            except ValueError:
                print(f"Porta inv√°lida: '{port_text}'")
        return None, None

    def definir_proxy_temporario(self, dialog):
        """
        Define um proxy tempor√°rio a partir dos dados informados no di√°logo.

        - Obt√©m host e porta via `get_proxy_from_dialog`.
        - Caso v√°lidos, aplica o proxy imediatamente.
        - Fecha o di√°logo ap√≥s a configura√ß√£o.
        """
        host, port = self.get_proxy_from_dialog(dialog)
        if host and port:
            self.definir_proxy(host, port)
            dialog.close()

    def salvar_e_usar_proxy(self, dialog):
        """
        Salva um novo proxy na lista e o aplica imediatamente.

        - Obt√©m host e porta do di√°logo.
        - Permite atribuir um apelido ao proxy (ou usa host:port como padr√£o).
        - Adiciona o proxy √† lista persistente (`proxy_list`) e salva em arquivo.
        - Define o proxy como ativo e fecha o di√°logo.
        """
        host, port = self.get_proxy_from_dialog(dialog)
        if host and port:
            apelido = dialog.apelido_input.text().strip()
            if not apelido:
                apelido = f"{host}:{port}"
            novo_proxy = {"apelido": apelido, "host": host, "port": port}
            self.proxy_list.append(novo_proxy)
            self.salvar_proxies()
            self.definir_proxy(host, port, apelido=apelido)
            dialog.close()

    def trocar_proxy(self):
        """
        Alterna entre os proxies salvos na lista (`proxy_list`).

        - Caso n√£o haja proxies salvos, desativa o proxy e retorna.
        - Incrementa o √≠ndice atual (`current_proxy_index`) para rotacionar.
        - Se o √≠ndice ultrapassar o limite, volta para -1 (conex√£o direta).
        - Aplica o pr√≥ximo proxy da lista ou desativa caso o √≠ndice seja -1.
        """
        if not self.proxy_list:
            print("Nenhum proxy salvo para rotacionar.")
            self.desativar_proxy()
            return

        self.current_proxy_index += 1
        if self.current_proxy_index >= len(self.proxy_list):
            self.current_proxy_index = -1

        if self.current_proxy_index == -1:
            self.desativar_proxy()
        else:
            proxy_info = self.proxy_list[self.current_proxy_index]
            self.definir_proxy(proxy_info["host"], proxy_info["port"], apelido=proxy_info["apelido"])

    def definir_proxy(self, host, port, apelido=None):
        """
        Define um proxy HTTP como proxy da aplica√ß√£o.

        - Cria um objeto `QNetworkProxy` com host e porta informados.
        - Aplica o proxy globalmente na aplica√ß√£o.
        - Atualiza a barra de status com a informa√ß√£o do proxy ativo.
        """
        proxy = QNetworkProxy(QNetworkProxy.ProxyType.HttpProxy, host, port)
        QNetworkProxy.setApplicationProxy(proxy)

        status_text = apelido if apelido else f"{host}:{port}"
        self.proxy_status_message = f"Proxy Ativo: {status_text}"
        self.status_bar.showMessage(self.proxy_status_message)
        print(self.proxy_status_message)

    def desativar_proxy(self):
        """
        Desativa o uso de proxy, restaurando a conex√£o direta.

        - Define `QNetworkProxy.NoProxy` como configura√ß√£o global.
        - Atualiza a barra de status e imprime mensagem no console.
        """
        QNetworkProxy.setApplicationProxy(QNetworkProxy.NoProxy)
        self.proxy_status_message = "Conex√£o Direta"
        self.status_bar.showMessage(self.proxy_status_message)
        print("Proxy desativado.")

class BookmarkActions:
    """
    Classe respons√°vel por gerenciar os favoritos (bookmarks) do navegador.
    Inclui m√©todos para carregar, salvar, adicionar, remover e atualizar a barra de favoritos.
    """

    def carregar_favoritos(self):
        """
        Carrega os favoritos a partir de um arquivo JSON.

        - Caso o arquivo n√£o exista ou esteja corrompido, inicializa um dicion√°rio vazio.
        - Estrutura esperada: { "T√≠tulo da P√°gina": "URL" }
        """
        try:
            with open(self.bookmarks_file, "r") as f:
                self.bookmarks = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.bookmarks = {}

    def salvar_favoritos(self):
        """
        Salva os favoritos atuais em um arquivo JSON.

        - Garante persist√™ncia entre sess√µes.
        - Usa indenta√ß√£o para facilitar leitura manual do arquivo.
        """
        with open(self.bookmarks_file, "w") as f:
            json.dump(self.bookmarks, f, indent=4)

    def toggle_favorito(self):
        """
        Alterna o estado de favorito da aba atual.

        - Se a URL j√° estiver salva nos favoritos, remove.
        - Caso contr√°rio, adiciona como novo favorito.
        """
        aba = self.aba_atual()
        if not isinstance(aba, WebView):
            return

        url_atual = aba.url().toString()
        if url_atual in self.bookmarks.values():
            self.remover_favorito()
        else:
            self.adicionar_favorito()

    def adicionar_favorito(self):
        """
        Adiciona a aba atual √† lista de favoritos.

        - Usa o t√≠tulo da p√°gina como chave e a URL como valor.
        - Ignora p√°ginas sem t√≠tulo, sem URL ou em branco (about:blank).
        - Atualiza a barra de favoritos e o bot√£o de altern√¢ncia.
        """
        aba = self.aba_atual()
        titulo = aba.page().title()
        url = aba.url().toString()

        if not titulo or not url or url == "about:blank":
            return

        self.bookmarks[titulo] = url
        self.salvar_favoritos()
        self.atualizar_barra_favoritos()
        self.atualizar_botao_favorito()

    def remover_favorito(self):
        """
        Remove a aba atual da lista de favoritos.

        - Busca a URL atual nos favoritos e remove a entrada correspondente.
        - Atualiza a barra de favoritos e o bot√£o de altern√¢ncia.
        """
        aba = self.aba_atual()
        url_atual = aba.url().toString()
        titulo_para_remover = None

        for titulo, url in self.bookmarks.items():
            if url == url_atual:
                titulo_para_remover = titulo
                break

        if titulo_para_remover:
            del self.bookmarks[titulo_para_remover]
            self.salvar_favoritos()
            self.atualizar_barra_favoritos()
            self.atualizar_botao_favorito()

    def atualizar_botao_favorito(self):
        """
        Atualiza o estado visual do bot√£o de favoritos.

        - Se a aba atual for uma WebView v√°lida, habilita o bot√£o.
        - Exibe "‚òÜ Remover" caso a URL j√° esteja salva.
        - Exibe "‚òÖ Salvar" caso a URL ainda n√£o esteja nos favoritos.
        - Caso n√£o seja uma aba de navega√ß√£o, desabilita o bot√£o.
        """
        aba = self.aba_atual()
        if isinstance(aba, WebView):
            self.btn_toggle_favorito.setEnabled(True)
            url_atual = aba.url().toString()
            if url_atual in self.bookmarks.values():
                self.btn_toggle_favorito.setText("‚òÜ Remover")
            else:
                self.btn_toggle_favorito.setText("‚òÖ Salvar")
        else:
            self.btn_toggle_favorito.setEnabled(False)

    def atualizar_barra_favoritos(self):
        """
        Atualiza a barra de favoritos exibida na interface.

        - Remove todos os bot√µes atuais.
        - Cria um bot√£o para cada favorito salvo, com o t√≠tulo como r√≥tulo.
        - Cada bot√£o abre a respectiva URL em uma nova aba ao ser clicado.
        """
        self.bookmarks_toolbar.clear()
        for titulo, url in self.bookmarks.items():
            btn = QPushButton(titulo)
            btn.clicked.connect(lambda checked, u=url: self.adicionar_nova_aba(QUrl(u)))
            self.bookmarks_toolbar.addWidget(btn)
            
class FindActions:
    """
    Classe respons√°vel pelas a√ß√µes de busca de texto no navegador/editor.

    Permite abrir/fechar a barra de busca, localizar texto na aba atual
    (seja em p√°ginas web ou editores de texto) e navegar entre as ocorr√™ncias.
    """

    def abrir_busca(self):
        """
        Exibe a barra de busca e coloca o foco no campo de entrada.

        - Torna a barra de busca vis√≠vel.
        - Garante que o usu√°rio possa digitar imediatamente o termo a ser buscado.
        """
        self.find_toolbar.show()
        self.find_input.setFocus()

    def fechar_busca(self):
        """
        Fecha a barra de busca e limpa os destaques de pesquisa.

        - Oculta a barra de busca.
        - Se a aba atual for uma WebView, limpa os resultados da busca.
        - Se for um editor de texto (HtmlEditor ou QPlainTextEdit),
          remove a sele√ß√£o atual do cursor.
        """
        self.find_toolbar.hide()
        aba = self.aba_atual()
        if isinstance(aba, WebView):
            aba.findText("")  # limpa destaques
        elif isinstance(aba, (HtmlEditor, QPlainTextEdit)):
            cursor = aba.textCursor()
            cursor.clearSelection()
            aba.setTextCursor(cursor)

    def buscar_texto(self, text):
        """
        Realiza a busca inicial do texto informado na aba atual.

        - Em WebView: usa o m√©todo `findText` do QWebEnginePage.
        - Em editores de texto: posiciona o cursor no in√≠cio do documento
          e executa a busca pelo termo.
        """
        aba = self.aba_atual()
        if isinstance(aba, WebView):
            aba.findText(text)
        elif isinstance(aba, (HtmlEditor, QPlainTextEdit)):
            cursor = aba.textCursor()
            cursor.setPosition(0)  # in√≠cio do documento
            aba.setTextCursor(cursor)
            aba.find(text)

    def buscar_proximo(self):
        """
        Busca a pr√≥xima ocorr√™ncia do termo digitado.

        - Obt√©m o texto do campo de busca.
        - Em WebView: chama `findText` novamente para avan√ßar.
        - Em editores de texto: usa `find` para localizar a pr√≥xima ocorr√™ncia.
        """
        aba = self.aba_atual()
        text = self.find_input.text()
        if isinstance(aba, WebView):
            aba.findText(text)
        elif isinstance(aba, (HtmlEditor, QPlainTextEdit)):
            aba.find(text)

    def buscar_anterior(self):
        """
        Busca a ocorr√™ncia anterior do termo digitado.

        - Obt√©m o texto do campo de busca.
        - Em WebView: usa a flag `FindBackward` do QWebEnginePage.
        - Em editores de texto: usa a flag `FindBackward` do QTextDocument.
        """
        aba = self.aba_atual()
        text = self.find_input.text()
        if isinstance(aba, WebView):
            aba.findText(text, QWebEnginePage.FindFlag.FindBackward)
        elif isinstance(aba, (HtmlEditor, QPlainTextEdit)):
            aba.find(text, QTextDocument.FindFlag.FindBackward)
        

class PrivacyActions:
    """
    Classe respons√°vel pelas a√ß√µes de privacidade do navegador.

    Inclui:
    - Carregamento de listas de bloqueio de dom√≠nios.
    - Ativa√ß√£o/desativa√ß√£o do bloqueador de conte√∫do.
    - Controle da execu√ß√£o de JavaScript.
    - Atualiza√ß√£o dos bot√µes de interface relacionados √† privacidade.
    """

    def carregar_blocklist(self):
        """
        Carrega a lista de dom√≠nios bloqueados a partir de um arquivo JSON.

        - O arquivo esperado √© 'blocklist.json'.
        - Caso o arquivo exista, os dom√≠nios s√£o carregados em um conjunto (set).
        - Caso n√£o exista, inicializa a lista como vazia.
        - Exibe mensagens de log informativas ou de aviso.
        """
        try:
            with open("blocklist.json", "r") as f:
                self.blocklist = set(json.load(f))
                print(f"[INFO] Lista de bloqueio carregada com {len(self.blocklist)} dom√≠nios.")
        except FileNotFoundError:
            print("[AVISO] Arquivo 'blocklist.json' n√£o encontrado.")
            self.blocklist = set()

    def toggle_blocker(self, checked):
        """
        Ativa ou desativa o bloqueador de conte√∫do na aba atual.

        - Verifica se a aba atual √© uma WebView e possui um interceptor configurado.
        - Define o estado do bloqueador (ativo/inativo) com base no par√¢metro `checked`.
        - Atualiza o bot√£o de interface correspondente.
        """
        aba = self.aba_atual()
        if isinstance(aba, WebView) and hasattr(aba.page().profile(), 'interceptor'):
            aba.page().profile().interceptor.blocking_enabled = checked
            print(f"Bloqueador {'ativado' if checked else 'desativado'} para a aba atual.")
        self.atualizar_botao_blocker()

    def atualizar_botao_blocker(self):
        """
        Atualiza o estado visual do bot√£o de bloqueio de conte√∫do.

        - Se a aba atual for uma WebView com interceptor:
            - Habilita o bot√£o.
            - Ajusta o texto, cor e estado (ON/OFF) conforme o bloqueador esteja ativo ou n√£o.
        - Caso contr√°rio:
            - Desabilita o bot√£o e restaura estilo padr√£o.
        """
        aba = self.aba_atual()
        if isinstance(aba, WebView) and hasattr(aba.page().profile(), 'interceptor'):
            self.btn_blocker.setEnabled(True)
            blocker_ativo = aba.page().profile().interceptor.blocking_enabled
            if blocker_ativo:
                self.btn_blocker.setText("Block ON")
                self.btn_blocker.setStyleSheet("background-color: lightcoral; color: white;")
                self.btn_blocker.setChecked(True)
            else:
                self.btn_blocker.setText("Block OFF")
                self.btn_blocker.setStyleSheet("background-color: lightgreen; color: black;")
                self.btn_blocker.setChecked(False)
        else:
            self.btn_blocker.setText("Block")
            self.btn_blocker.setStyleSheet("")
            self.btn_blocker.setEnabled(False)

    def toggle_javascript(self, checked):
        """
        Ativa ou desativa a execu√ß√£o de JavaScript na aba atual.

        - Se a aba atual for uma WebView, altera o atributo `JavascriptEnabled`.
        - O par√¢metro `checked` representa o estado do bot√£o (ativado/desativado).
        - Ap√≥s a altera√ß√£o, atualiza o bot√£o de interface correspondente.
        """
        aba = self.aba_atual()
        if isinstance(aba, WebView):
            aba.page().settings().setAttribute(
                QWebEngineSettings.WebAttribute.JavascriptEnabled,
                not checked
            )
        self.atualizar_botao_js()

    def atualizar_botao_js(self):
        """
        Atualiza o estado visual do bot√£o de controle de JavaScript.

        - Se a aba atual for uma WebView:
            - Habilita o bot√£o.
            - Ajusta o texto, cor e estado (ON/OFF) conforme o JavaScript esteja habilitado ou n√£o.
        - Caso contr√°rio:
            - Desabilita o bot√£o e restaura estilo padr√£o.
        """
        aba = self.aba_atual()
        if isinstance(aba, WebView):
            self.btn_js.setEnabled(True)
            js_habilitado = aba.page().settings().testAttribute(
                QWebEngineSettings.WebAttribute.JavascriptEnabled
            )
            if js_habilitado:
                self.btn_js.setText("JS ON")
                self.btn_js.setStyleSheet("background-color: lightgreen; color: black;")
                self.btn_js.setChecked(False)
            else:
                self.btn_js.setText("JS OFF")
                self.btn_js.setStyleSheet("background-color: lightcoral; color: white;")
                self.btn_js.setChecked(True)
        else:
            self.btn_js.setText("JS")
            self.btn_js.setStyleSheet("")
            self.btn_js.setEnabled(False)
            
class DownloadActions:
    """
    Mixin que implementa as a√ß√µes relacionadas a downloads de arquivos no navegador.

    Responsabilidades:
    - Interceptar solicita√ß√µes de download.
    - Permitir ao usu√°rio escolher o local de salvamento.
    - Monitorar o progresso do download.
    - Exibir mensagens de status e notificar conclus√£o, cancelamento ou falha.
    """

    def handle_download_request(self, download: QWebEngineDownloadRequest):
        """
        Manipula uma nova solicita√ß√£o de download.

        - Sugere o diret√≥rio padr√£o de downloads do usu√°rio.
        - Abre um di√°logo para que o usu√°rio escolha onde salvar o arquivo.
        - Caso o usu√°rio confirme:
            - Define o diret√≥rio e nome do arquivo no objeto `download`.
            - Conecta sinais para monitorar progresso e estado final.
            - Exibe mensagem de status e inicia o download.
            - Adiciona o download √† lista de downloads ativos.
        - Caso o usu√°rio cancele:
            - Cancela o download e exibe mensagem no console.
        """
        suggested_path = os.path.join(str(Path.home()), "Downloads", download.downloadFileName())
        file_path, _ = QFileDialog.getSaveFileName(self, "Salvar Arquivo", suggested_path)

        if file_path:
            download.setDownloadDirectory(os.path.dirname(file_path))
            download.setDownloadFileName(os.path.basename(file_path))

            # Conecta sinais para progresso e t√©rmino
            download.receivedBytesChanged.connect(lambda: self.update_download_progress(download))
            download.stateChanged.connect(lambda state, download=download: self.finish_download(state, download))

            self.status_bar.showMessage(f"Baixando {os.path.basename(file_path)}...")
            download.accept()
            self.active_downloads.append(download)
        else:
            print("Download cancelado.")
            download.cancel()

    def update_download_progress(self, download: QWebEngineDownloadRequest):
        """
        Atualiza o progresso do download em tempo real.

        - Obt√©m bytes recebidos e total esperado.
        - Se o total for conhecido, calcula a porcentagem conclu√≠da.
        - Caso contr√°rio, exibe apenas o tamanho j√° baixado em KB.
        - Atualiza a barra de status com a informa√ß√£o.
        """
        bytes_received = download.receivedBytes()
        bytes_total = download.totalBytes()
        if bytes_total > 0:
            percent = int((bytes_received / bytes_total) * 100)
            self.status_bar.showMessage(f"Baixando... {percent}%")
        else:
            self.status_bar.showMessage(f"Baixando... {bytes_received / 1024:.0f} KB")

    def finish_download(self, state, download: QWebEngineDownloadRequest):
        """
        Trata o t√©rmino de um download, exibindo mensagens adequadas.

        - Se conclu√≠do com sucesso: mostra mensagem de "Download conclu√≠do".
        - Se cancelado: mostra mensagem de "Download cancelado".
        - Se interrompido/falhou: mostra mensagem de erro.
        - Remove o download da lista de downloads ativos.
        """
        if state == QWebEngineDownloadRequest.DownloadCompleted:
            self.status_bar.showMessage("Download conclu√≠do!", 5000)
        elif state == QWebEngineDownloadRequest.DownloadCancelled:
            self.status_bar.showMessage("Download cancelado.", 5000)
        elif state == QWebEngineDownloadRequest.DownloadInterrupted:
            self.status_bar.showMessage("Download interrompido/falhou.", 5000)

        if download in self.active_downloads:
            self.active_downloads.remove(download)
            
class HistoryActions:
    """
    Mixin para as a√ß√µes de Hist√≥rico de Navega√ß√£o.

    Responsabilidades:
    - Carregar e salvar o hist√≥rico em arquivo JSON.
    - Registrar novas entradas de navega√ß√£o.
    - Exibir o hist√≥rico em uma aba dedicada, com filtro de pesquisa.
    - Permitir limpar o hist√≥rico e reabrir p√°ginas visitadas.
    """

    def carregar_historico(self):
        """
        Carrega o hist√≥rico de navega√ß√£o a partir de um arquivo JSON.

        - Caso o arquivo exista e seja v√°lido, carrega a lista de entradas.
        - Caso contr√°rio, inicializa o hist√≥rico como uma lista vazia.
        """
        try:
            with open(self.history_file, "r", encoding='utf-8') as f:
                self.history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.history = []

    def salvar_historico(self):
        """
        Salva o hist√≥rico de navega√ß√£o no arquivo JSON.

        - Garante persist√™ncia entre sess√µes.
        - Usa indenta√ß√£o para facilitar leitura manual do arquivo.
        """
        with open(self.history_file, "w", encoding='utf-8') as f:
            json.dump(self.history, f, indent=4)

    def adicionar_ao_historico(self, browser):
        """
        Adiciona a p√°gina atual ao hist√≥rico de navega√ß√£o.

        - Obt√©m a URL e o t√≠tulo da aba atual.
        - Ignora URLs inv√°lidas, em branco ou duplicadas consecutivas.
        - Cria uma entrada com URL, t√≠tulo e timestamp ISO 8601.
        - Salva o hist√≥rico atualizado em arquivo.
        """
        url = browser.url().toString()
        titulo = browser.title()

        if not url or url == "about:blank" or (self.history and self.history[-1]['url'] == url):
            return

        entrada = {
            "url": url,
            "titulo": titulo,
            "timestamp": datetime.datetime.now().isoformat()
        }
        self.history.append(entrada)
        self.salvar_historico()

    def abrir_aba_historico(self):
        """
        Abre uma nova aba exibindo o hist√≥rico de navega√ß√£o.

        - Se a aba "Hist√≥rico" j√° estiver aberta, apenas a ativa.
        - Caso contr√°rio:
            - Cria um widget com campo de filtro, lista de hist√≥rico e bot√£o de limpar.
            - Popula a lista com entradas do hist√≥rico em ordem reversa (mais recentes primeiro).
            - Cada item exibe t√≠tulo, data/hora formatada e URL.
            - Permite abrir p√°ginas ao dar duplo clique em um item.
            - Permite filtrar entradas digitando no campo de pesquisa.
        """
        for i in range(self.tabs.count()):
            if self.tabs.tabText(i) == "Hist√≥rico":
                self.tabs.setCurrentIndex(i)
                return

        history_widget = QWidget()
        layout = QVBoxLayout(history_widget)

        filter_input = QLineEdit()
        filter_input.setPlaceholderText("Pesquisar no hist√≥rico...")

        self.history_list_widget = QListWidget()

        # Bot√£o para limpar hist√≥rico
        btn_limpar = QPushButton("Limpar Hist√≥rico")
        btn_limpar.clicked.connect(self.limpar_historico)

        layout.addWidget(filter_input)
        layout.addWidget(self.history_list_widget)
        layout.addWidget(btn_limpar)

        # Popula a lista com entradas do hist√≥rico
        for item in reversed(self.history):
            try:
                dt_object = datetime.datetime.fromisoformat(item['timestamp'])
                formatted_time = dt_object.strftime('%d/%m/%Y %H:%M:%S')
                display_text = f"{item['titulo']}\n{formatted_time} - {item['url']}"
            except (ValueError, KeyError):
                display_text = f"{item.get('titulo', 'Sem T√≠tulo')}\n{item.get('url', '')}"

            list_item = QListWidgetItem(display_text)
            list_item.setData(Qt.UserRole, item['url'])
            self.history_list_widget.addItem(list_item)

        # Conex√µes de eventos
        self.history_list_widget.itemDoubleClicked.connect(self._on_history_item_activated)
        filter_input.textChanged.connect(self._filter_history)

        index = self.tabs.addTab(history_widget, "Hist√≥rico")
        self.tabs.setCurrentIndex(index)

    def limpar_historico(self):
        """
        Limpa todo o hist√≥rico de navega√ß√£o.

        - Remove todas as entradas da lista em mem√≥ria.
        - Atualiza o arquivo JSON para refletir a exclus√£o.
        - Limpa a lista exibida na interface, se existir.
        """
        self.history.clear()
        self.salvar_historico()
        if hasattr(self, 'history_list_widget'):
            self.history_list_widget.clear()
        print("Hist√≥rico limpo.")

    def _on_history_item_activated(self, item):
        """
        Abre em uma nova aba a URL associada ao item do hist√≥rico.

        - Obt√©m a URL armazenada no item da lista.
        - Cria uma nova aba de navega√ß√£o com essa URL.
        """
        url = item.data(Qt.UserRole)
        self.adicionar_nova_aba(QUrl(url))

    def _filter_history(self, text):
        """
        Filtra os itens do hist√≥rico exibidos na lista.

        - Esconde os itens cujo texto n√£o contenha o termo pesquisado.
        - A busca √© case-insensitive (ignora mai√∫sculas/min√∫sculas).
        """
        for i in range(self.history_list_widget.count()):
            item = self.history_list_widget.item(i)
            item.setHidden(text.lower() not in item.text().lower())
            
class DevToolsActions:
    """
    Mixin para as Ferramentas de Desenvolvedor (DevTools).

    Responsabilidades:
    - Exibir ou ocultar o painel de rede (network panel).
    - Abrir o di√°logo de intercepta√ß√£o e modifica√ß√£o de requisi√ß√µes (TamperDialog).
    """

    def toggle_network_panel(self):
        """
        Alterna a visibilidade do painel de rede (network_dock).

        - Se o painel j√° estiver vis√≠vel, oculta.
        - Caso contr√°rio, exibe.
        - √ötil para desenvolvedores inspecionarem requisi√ß√µes e respostas HTTP.
        """
        if self.network_dock.isVisible():
            self.network_dock.hide()
        else:
            self.network_dock.show()

    def abrir_dialogo_tamper(self, request_info):
        """
        Abre o di√°logo de intercepta√ß√£o e modifica√ß√£o de requisi√ß√µes (TamperDialog).

        - Recebe informa√ß√µes da requisi√ß√£o (`request_info`).
        - Cria uma inst√¢ncia de `TamperDialog` passando os dados e a refer√™ncia da janela principal.
        - Mant√©m a refer√™ncia em `self.tamper_dialog` para evitar que o di√°logo seja destru√≠do pelo garbage collector.
        - Exibe o di√°logo para que o usu√°rio possa inspecionar ou alterar a requisi√ß√£o antes do envio.
        """
        self.tamper_dialog = TamperDialog(request_info, self)
        self.tamper_dialog.show()   # mant√©m refer√™ncia em self
        
class ProtocolActions:
    """
    Mixin para lidar com protocolos alternativos, como o Gopher.

    Responsabilidades:
    - Interpretar e processar requisi√ß√µes Gopher.
    - Converter respostas em HTML para exibi√ß√£o no navegador.
    - Suportar diferentes tipos de conte√∫do (texto, menus, imagens).
    """

    def handle_gopher_request(self, url, tab):
        """
        Manipula uma requisi√ß√£o Gopher e renderiza o resultado na aba especificada.

        - Analisa a URL para extrair host, porta, seletor e tipo de conte√∫do.
        - Estabelece conex√£o TCP com o servidor Gopher.
        - Envia o seletor e recebe a resposta bruta.
        - Se o tipo for imagem (g, I, p), converte os dados em HTML com <img>.
        - Caso contr√°rio, interpreta o mapa Gopher (menus/texto) e converte em HTML.
        - Em caso de erro, exibe mensagem de falha na aba.
        """
        try:
            # Extrai tipo de conte√∫do da query string, se presente
            gopher_type = None
            if "?gopher_type=" in url:
                url_parts = url.split("?gopher_type=")
                url = url_parts[0]
                gopher_type = url_parts[1]

            # Extrai host, porta e seletor da URL
            parts = url.split("//")[1].split("/")
            host_port = parts[0].split(":")
            host = host_port[0]
            port = int(host_port[1]) if len(host_port) > 1 else 70
            selector = "/" + "/".join(parts[1:]) if len(parts) > 1 else ""

            # Conex√£o TCP com servidor Gopher
            with socket.create_connection((host, port), timeout=10) as s:
                s.sendall((selector + "\r\n").encode('utf-8'))
                response_data = b""
                while True:
                    chunk = s.recv(8192)
                    if not chunk:
                        break
                    response_data += chunk

            # Decide como processar a resposta
            if gopher_type in ('g', 'I', 'p'):
                # Conte√∫do de imagem ‚Üí gera HTML com <img>
                html = self._parse_image_to_html(response_data, gopher_type)
            else:
                # Conte√∫do textual/menu ‚Üí converte mapa Gopher em HTML
                gopher_map = response_data.decode('utf-8', errors='ignore')
                html = self._parse_gopher_map_to_html(gopher_map, host, port)

            tab.setHtml(html, QUrl(url))

        except Exception as e:
            print(f"Erro ao acessar Gopher: {e}")
            tab.setHtml(f"<h1>Erro ao acessar Gopher</h1><p>{e}</p>")

    def _parse_image_to_html(self, image_data, gopher_type):
        """
        Converte dados brutos de imagem em uma p√°gina HTML com a imagem embutida.

        - Suporta GIF (g), JPEG (I) e PNG (p).
        - Codifica os bytes da imagem em Base64.
        - Retorna HTML com <img> centralizado e fundo escuro.
        """
        mime_map = {'g': 'image/gif', 'p': 'image/png', 'I': 'image/jpeg'}
        mime_type = mime_map.get(gopher_type, 'application/octet-stream')

        b64_data = base64.b64encode(image_data).decode('ascii')

        return (
            f'<html><body style="background-color: #333; display: grid; '
            f'place-items: center; margin: 0;">'
            f'<img src="data:{mime_type};base64,{b64_data}"></body></html>'
        )

    def _parse_gopher_map_to_html(self, gopher_map, current_host, current_port):
        """
        Converte um mapa Gopher (texto estruturado) em HTML naveg√°vel.

        - Cada linha do mapa representa um item (arquivo, diret√≥rio, link, etc.).
        - Interpreta o tipo do item (primeiro caractere da linha).
        - Gera links HTML apropriados para cada tipo:
            - '0' ‚Üí Documento de texto
            - '1' ‚Üí Diret√≥rio
            - 'h' ‚Üí Link externo (HTTP/HTML)
            - 'g', 'I', 'p' ‚Üí Imagens
            - 'i' ‚Üí Informa√ß√£o (texto simples)
            - Outros ‚Üí Exibe como desconhecido
        - Retorna HTML estilizado com <pre> e √≠cones visuais.
        """
        html_lines = [
            '<html><head><meta charset="UTF-8">',
            '<title>Gopher Page</title>',
            '<style>body { font-family: monospace; background-color: #f0f0f0; '
            'color: #333; } a { text-decoration: none; color: #0000FF;} '
            'p { margin: 2px; }</style>',
            '</head><body><h2>Gopherspace</h2><pre>'
        ]

        for line in gopher_map.splitlines():
            if not line or len(line) < 2:
                continue

            item_type = line[0]
            parts = line[1:].split('\t')
            display_text = parts[0]
            selector = parts[1] if len(parts) > 1 else ""
            host = parts[2] if len(parts) > 2 else current_host
            port = parts[3] if len(parts) > 3 else current_port

            if item_type == 'i':
                html_lines.append(f'<p>  {display_text}</p>')
            elif item_type == '0':
                html_lines.append(
                    f'<p>üìÑ <a href="gopher://{host}:{port}{selector}?gopher_type=0">'
                    f'{display_text}</a></p>'
                )
            elif item_type == '1':
                html_lines.append(
                    f'<p>üìÅ <a href="gopher://{host}:{port}{selector}?gopher_type=1">'
                    f'{display_text}</a></p>'
                )
            elif item_type == 'h':
                html_url = selector.replace("URL:", "")
                html_lines.append(f'<p>üåê <a href="{html_url}">{display_text}</a></p>')
            elif item_type in ('g', 'I', 'p'):  # GIF, JPEG, PNG
                html_lines.append(
                    f'<p>üñºÔ∏è <a href="gopher://{host}:{port}{selector}?gopher_type={item_type}">'
                    f'{display_text}</a></p>'
                )
            else:
                html_lines.append(
                    f'<p>‚ùì <a href="gopher://{host}:{port}{selector}?gopher_type={item_type}">'
                    f'{display_text}</a> (Tipo {item_type})</p>'
                )

        html_lines.append('</pre></body></html>')
        return "".join(html_lines)
        
class WorkerIA(QObject):
    """
    Worker respons√°vel por executar chamadas √† API de IA em uma thread separada.

    Responsabilidades:
    - Configurar e chamar o modelo de IA (Gemini).
    - Emitir sinais com o resultado, erro ou t√©rmino da execu√ß√£o.
    - Garantir que a interface gr√°fica (UI) permane√ßa responsiva durante a chamada.
    """

    # --- Sinais Qt ---
    resultado_pronto = Signal(str)   # Emitido quando a resposta da IA est√° dispon√≠vel
    erro_ocorrido = Signal(str)      # Emitido em caso de erro na chamada da API
    finished = Signal()              # Emitido quando a execu√ß√£o √© conclu√≠da (com ou sem sucesso)

    def __init__(self, api_key, prompt):
        """
        Inicializa o worker com a chave da API e o prompt a ser enviado.

        :param api_key: Chave de autentica√ß√£o para a API do Gemini.
        :param prompt: Texto de entrada (instru√ß√£o ou pergunta) a ser enviado ao modelo.
        """
        super().__init__()
        self.api_key = api_key
        self.prompt = prompt

    def rodar(self):
        """
        Executa a chamada √† API do Gemini em uma thread separada.

        - Configura a biblioteca `genai` com a chave da API.
        - Cria uma inst√¢ncia do modelo `gemini-2.5-flash`.
        - Envia o prompt e aguarda a resposta.
        - Emite o sinal `resultado_pronto` com o texto retornado.
        - Em caso de erro, emite `erro_ocorrido` com a mensagem de exce√ß√£o.
        - Sempre emite `finished` ao final, garantindo que a thread seja liberada.
        """
        try:
            genai.configure(api_key=self.api_key)
            model = genai.GenerativeModel('gemini-2.5-flash')
            response = model.generate_content(self.prompt)

            # Emite o resultado para ser tratado pela UI
            self.resultado_pronto.emit(response.text)

        except Exception as e:
            # Emite erro para ser exibido/logado pela aplica√ß√£o
            self.erro_ocorrido.emit(f"Erro na API do Gemini: {e}")

        finally:
            # Garante que a thread seja finalizada corretamente
            self.finished.emit()

class AIActions:
    """
    Mixin para as a√ß√µes de Intelig√™ncia Artificial.

    Responsabilidades:
    - Gerenciar a chave de API do Gemini (solicitar ao usu√°rio, salvar e reutilizar).
    - Criar e iniciar threads para execu√ß√£o de prompts de IA sem travar a interface.
    - Integrar os resultados da IA ao painel de assistente (ai_panel).
    """

    def processar_prompt_ia(self, prompt):
        """
        Processa um prompt de IA fornecido pelo usu√°rio.

        Fluxo:
        1. Verifica se a chave de API est√° configurada.
           - Caso n√£o esteja, solicita ao usu√°rio via di√°logo.
           - Se o usu√°rio fornecer, salva a chave para uso futuro.
           - Se n√£o fornecer, cancela a opera√ß√£o e informa no painel de IA.
        2. Se a chave estiver dispon√≠vel, cria uma thread dedicada.
        3. Instancia um WorkerIA com a chave e o prompt.
        4. Conecta sinais do worker para:
            - Exibir resposta no painel de IA.
            - Exibir erros no painel de IA.
            - Encerrar e limpar a thread ao t√©rmino.
        5. Inicia a execu√ß√£o da thread.
        """
        if not self.api_key:
            texto, ok = QInputDialog.getText(
                self,
                "Chave de API do Gemini",
                "Por favor, insira sua chave de API do Google AI Studio:"
            )
            if ok and texto:
                self.api_key = texto.strip()
                self.salvar_config()  # Persiste a chave para pr√≥ximas execu√ß√µes
            else:
                self.ai_panel.set_response(
                    "Opera√ß√£o cancelada. A chave de API √© necess√°ria para usar o assistente."
                )
                return

        if not self.api_key:
            return

        # Cria√ß√£o da thread e do worker
        self.thread = QThread()
        self.worker = WorkerIA(self.api_key, prompt)
        self.worker.moveToThread(self.thread)

        # Conex√£o de sinais
        self.thread.started.connect(self.worker.rodar)
        self.worker.resultado_pronto.connect(self.ai_panel.set_response)
        self.worker.erro_ocorrido.connect(self.ai_panel.set_response)
        self.worker.finished.connect(self.thread.quit)
        self.thread.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        # Inicia a thread
        self.thread.start()

    def _iniciar_worker_ia_com_contexto(self, page_text, original_prompt):
        """
        Cria o prompt final com base no contexto da p√°gina e inicia o worker de IA.

        - Recebe o texto da p√°gina e o prompt original do usu√°rio.
        - Se houver texto da p√°gina:
            - Limita o conte√∫do a 15.000 caracteres (para evitar excesso de dados).
            - Constr√≥i um prompt contextualizado, instruindo a IA a responder
              exclusivamente com base no conte√∫do fornecido.
        - Cria e inicia uma thread com WorkerIA, de forma id√™ntica ao m√©todo anterior.
        """
        final_prompt = original_prompt

        if page_text:
            page_text = page_text[:15000]  # Limita tamanho do contexto
            final_prompt = f"""Com base EXCLUSIVAMENTE no seguinte texto de uma p√°gina da web:

'''
{page_text}
'''

Responda ao seguinte pedido do usu√°rio: "{original_prompt}"
"""

        # Cria√ß√£o da thread e do worker com prompt contextualizado
        self.thread = QThread()
        self.worker = WorkerIA(self.api_key, final_prompt)
        self.worker.moveToThread(self.thread)

        # Conex√£o de sinais
        self.thread.started.connect(self.worker.rodar)
        self.worker.resultado_pronto.connect(self.ai_panel.set_response)
        self.worker.erro_ocorrido.connect(self.ai_panel.set_response)
        self.worker.finished.connect(self.thread.quit)
        self.thread.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        # Inicia a thread
        self.thread.start()